# -*- mode: ruby -*-
# vi: set ft=ruby :

def validate var
  if ENV[var].nil?
    abort(var + " must be set in your environment")
  end
  ENV[var]
end

def is_plugin(name)
  if Vagrant.has_plugin?(name)
    puts "using #{name}"
  else
    puts "please run vagrant plugin install #{name}"
    exit(1)
  end
end

Vagrant.configure(2) do |config|
  is_plugin('vagrant-aws')
  is_plugin('vagrant-triggers')
  is_plugin('aws-sdk')

  config.vm.provider :aws do |v, override|
    #workaround for bug in vagrant-aws plugin
    override.nfs.functional = false

    access_key_id = validate 'AWS_ACCESS_KEY_ID'
    secret_access_key = validate 'AWS_SECRET_ACCESS_KEY'
    region = validate 'AWS_REGION'

    override.trigger.after :destroy do
      require_relative 'destroy_iam_role.rb'
      destroy_iam_role region
    end

    v.access_key_id = access_key_id || ''
    v.secret_access_key = secret_access_key || ''
    v.ami = ''
    v.region = region || ''
    v.tags["Name"] = "UnikBackend"
    require_relative 'get_profile_arn.rb'
    v.iam_instance_profile_arn = get_profile_arn region
    v.block_device_mapping = [{ 'DeviceName' => '/dev/sda1', 'Ebs.VolumeSize' => 50 }]
    override.vm.provision "shell" do |s|
       s.path =  "scripts/provision.sh"
     end
  end

  config.vm.box = "xcoo/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder "../../", "/home/vagrant/go/src/github.com/layer-x/unik", type: "rsync",
    rsync__exclude: ".git/"

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL

end
